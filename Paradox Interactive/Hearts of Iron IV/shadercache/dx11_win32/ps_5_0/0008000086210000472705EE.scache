#define PIXEL_SHADER
#define PDX_DIRECTX_11

#define PDX_POSITION SV_POSITION
#define PDX_COLOR SV_TARGET

#define mod( X, Y ) ( X % Y )

#define FIX_FLIPPED_UV( X ) ( X )
#define FLIP_TEXTURE_V( vCoordinate ) ( vCoordinate )

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3
#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }


struct STextureSampler2D
{
    Texture2D 		_Texture;
    SamplerState 	_Sampler;
};
STextureSampler2D CreateSampler2D( Texture2D Texture, SamplerState Sampler )
{
    STextureSampler2D ret = { Texture, Sampler };
    return ret;
}

struct STextureSamplerCube
{
    TextureCube 	_Texture;
    SamplerState 	_Sampler;
};
STextureSamplerCube CreateSamplerCube( TextureCube Texture, SamplerState Sampler )
{
    STextureSamplerCube ret = { Texture, Sampler };
    return ret;
}

#define TextureSampler2D STextureSampler2D

#define sampler2DShadow STextureSampler2D
#define sampler2D STextureSampler2D

#define tex2D(samp,uv) samp._Texture.Sample(samp._Sampler, uv)
#define tex2Dlod(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xy, (uv_lod).w)
#define tex2Dlod0(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xy, 0)
#define tex2Dbias(samp,uv_bias) samp._Texture.SampleBias(samp._Sampler, (uv_bias).xy, (uv_bias).w)
#define tex2Dproj(samp,uv_proj) samp._Texture.SampleLevel(samp._Sampler, (uv_proj).xy / (uv_proj).w, 0)
#define tex2Dgrad(samp,uv,ddx,ddy) samp._Texture.SampleGrad(samp._Sampler, uv, ddx, ddy)

#define texCUBE(samp,uv) samp._Texture.Sample(samp._Sampler, uv)
#define texCUBElod(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xyz, (uv_lod).w)
#define texCUBEbias(samp,uv_bias) samp._Texture.SampleBias(samp._Sampler, (uv_bias).xyz, (uv_bias).w)

float fmod_loop( float x, float y )
{
  return x - y * floor( x / y );
}

Texture2D TextureOne_Texture : register(t0);
SamplerState TextureOne_Sampler : register(s0);
#define TextureOne CreateSampler2D(TextureOne_Texture, TextureOne_Sampler)
Texture2D TextureTwo_Texture : register(t1);
SamplerState TextureTwo_Sampler : register(s1);
#define TextureTwo CreateSampler2D(TextureTwo_Texture, TextureTwo_Sampler)
cbuffer dx11_cb0 : register(b0)
{
	float4x4 WorldViewProjectionMatrix;
	float4 vFirstColor;
	float4 vSecondColor;
	float CurrentState;
}
struct VS_INPUT
{
	float4 vPosition : POSITION;
	float2 vTexCoord : TEXCOORD0;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vTexCoord0 : TEXCOORD0;
};
		
		float4 main( VS_OUTPUT v ) : PDX_COLOR
		{
            float width = vFirstColor.r * 1000.f;
            float height = vFirstColor.g * 1000.f;
            float lineWidth = vFirstColor.b * 10.f;

			float value = CurrentState * 1000000.f;
			float end = mod(value, 1000.f) / height;
			float start = floor(value / 1000.f) / height;

            float mod = mod(floor(v.vTexCoord0.x * width), 15);
            if  ((mod < 5) && vSecondColor.r == 0.95) {
                return float4(0, 0, 0, 0);
            }


            float2 p1 = float2(0, height * start);
            float2 p2 = float2(width, height * end);

            float2 currentP = float2(width * v.vTexCoord0.x, height * v.vTexCoord0.y);

            float2 lineDir = p2 - p1;
            float2 perpDir = float2(lineDir.y, -lineDir.x);

            float2 dir1 = p1 + float2(0.f, 0.f) - currentP;
            float dist1 = abs(dot(normalize(perpDir), dir1));

            float2 dir2 = p1 + float2(0.1f, 0.1f) - currentP;
            float dist2 = abs(dot(normalize(perpDir), dir2));

            float2 dir3 = p1 + float2(-0.1f, 0.1f) - currentP;
            float dist3 = abs(dot(normalize(perpDir), dir3));

            float2 dir4 = p1 + float2(-0.1f, -0.1f) - currentP;
            float dist4 = abs(dot(normalize(perpDir), dir4));

            float2 dir5 = p1 + float2(0.1f, -0.1f) - currentP;
            float dist5 = abs(dot(normalize(perpDir), dir5));

            float dist = min(dist1, min(dist2, min(dist3, min(dist4, dist5))));

            if (currentP.y > max(p1.y, p2.y) || currentP.y < min(p1.y, p2.y)) {
                dist = max(dist, min(abs(p1.y - currentP.y), abs(p2.y - currentP.y)));
            }


            float intensity = saturate((lineWidth - dist) / 1.4f);

            float4 toRet = vSecondColor;
            toRet.a *= intensity;
            return toRet;
		}
		
	