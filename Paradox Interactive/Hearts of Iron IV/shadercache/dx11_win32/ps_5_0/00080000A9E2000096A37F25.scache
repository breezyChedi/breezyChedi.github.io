#define PIXEL_SHADER
#define PDX_DIRECTX_11

#define PDX_POSITION SV_POSITION
#define PDX_COLOR SV_TARGET

#define mod( X, Y ) ( X % Y )

#define FIX_FLIPPED_UV( X ) ( X )
#define FLIP_TEXTURE_V( vCoordinate ) ( vCoordinate )

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3
#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }


struct STextureSampler2D
{
    Texture2D 		_Texture;
    SamplerState 	_Sampler;
};
STextureSampler2D CreateSampler2D( Texture2D Texture, SamplerState Sampler )
{
    STextureSampler2D ret = { Texture, Sampler };
    return ret;
}

struct STextureSamplerCube
{
    TextureCube 	_Texture;
    SamplerState 	_Sampler;
};
STextureSamplerCube CreateSamplerCube( TextureCube Texture, SamplerState Sampler )
{
    STextureSamplerCube ret = { Texture, Sampler };
    return ret;
}

#define TextureSampler2D STextureSampler2D

#define sampler2DShadow STextureSampler2D
#define sampler2D STextureSampler2D

#define tex2D(samp,uv) samp._Texture.Sample(samp._Sampler, uv)
#define tex2Dlod(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xy, (uv_lod).w)
#define tex2Dlod0(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xy, 0)
#define tex2Dbias(samp,uv_bias) samp._Texture.SampleBias(samp._Sampler, (uv_bias).xy, (uv_bias).w)
#define tex2Dproj(samp,uv_proj) samp._Texture.SampleLevel(samp._Sampler, (uv_proj).xy / (uv_proj).w, 0)
#define tex2Dgrad(samp,uv,ddx,ddy) samp._Texture.SampleGrad(samp._Sampler, uv, ddx, ddy)

#define texCUBE(samp,uv) samp._Texture.Sample(samp._Sampler, uv)
#define texCUBElod(samp,uv_lod) samp._Texture.SampleLevel(samp._Sampler, (uv_lod).xyz, (uv_lod).w)
#define texCUBEbias(samp,uv_bias) samp._Texture.SampleBias(samp._Sampler, (uv_bias).xyz, (uv_bias).w)

float fmod_loop( float x, float y )
{
  return x - y * floor( x / y );
}

Texture2D MapTexture_Texture : register(t0);
SamplerState MapTexture_Sampler : register(s0);
#define MapTexture CreateSampler2D(MapTexture_Texture, MapTexture_Sampler)
Texture2D MaskTexture_Texture : register(t1);
SamplerState MaskTexture_Sampler : register(s1);
#define MaskTexture CreateSampler2D(MaskTexture_Texture, MaskTexture_Sampler)
Texture2D AnimatedTexture_Texture : register(t2);
SamplerState AnimatedTexture_Sampler : register(s2);
#define AnimatedTexture CreateSampler2D(AnimatedTexture_Texture, AnimatedTexture_Sampler)
Texture2D MaskTexture2_Texture : register(t3);
SamplerState MaskTexture2_Sampler : register(s3);
#define MaskTexture2 CreateSampler2D(MaskTexture2_Texture, MaskTexture2_Sampler)
Texture2D AnimatedTexture2_Texture : register(t4);
SamplerState AnimatedTexture2_Sampler : register(s4);
#define AnimatedTexture2 CreateSampler2D(AnimatedTexture2_Texture, AnimatedTexture2_Sampler)
cbuffer dx11_cb0 : register(b0)
{
	float4x4 WorldViewProjectionMatrix;
	float4 Color;
	float2 Offset;
	float2 NextOffset;
	float Time;
	float AnimationTime;
}
cbuffer dx11_cb1 : register(b1)
{
	float4 ConstantData[10];
}
struct VS_INPUT
{
	float3 vPosition : POSITION;
	float2 vTexCoord : TEXCOORD0;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vTexCoord : TEXCOORD0;
#ifdef ANIMATED
	float4 vAnimatedTexCoord : TEXCOORD1;
#endif
};

struct AnimationData
{
	float4 Rotation;
	float4 UVScale;
	float2 RotationOffset;
	float2 TextureStretch;
	float AnimationOffset;
	float BlendFactor;
	float Type; // 1 = Scrolling, 2 = Rotating, 3 = Pulse
	float BlendMode; // 0 = Add, 1 = Multiply, 2 = Overlay
	float ClampAnimation;
};

AnimationData GetAnimationData(int nIndex)
{
	AnimationData data;
	
	data.Rotation = ConstantData[nIndex * 5];
	data.UVScale = ConstantData[nIndex * 5 + 1];
	data.RotationOffset = ConstantData[nIndex * 5 + 2].xy;
	data.TextureStretch = ConstantData[nIndex * 5 + 2].zw;
	data.AnimationOffset = ConstantData[nIndex * 5 + 3].x;
	data.BlendFactor = ConstantData[nIndex * 5 + 3].y;
	data.Type = ConstantData[nIndex * 5 + 3].z;
	data.BlendMode = ConstantData[nIndex * 5 + 3].w;
	data.ClampAnimation = ConstantData[nIndex * 5 + 4].x;

	return data;
}

float2 GetAnimatedTexcoord(float2 Texcoord, AnimationData Data)
{
	float2 AnimatedTexcoord = vec2(0.0);
	float2 OffsetAndScaledTexcoord = (Data.RotationOffset + Texcoord - vec2(0.5)) * Data.UVScale.xy * Data.TextureStretch;
	
	if (Data.Type == 1) // Scrolling
	{
		AnimatedTexcoord = float2(dot(OffsetAndScaledTexcoord, Data.Rotation.xy), dot(OffsetAndScaledTexcoord, Data.Rotation.zw));
		
		AnimatedTexcoord /= Data.UVScale.xy;
		AnimatedTexcoord *= Data.UVScale.zw;
		AnimatedTexcoord.y += Data.AnimationOffset;

		AnimatedTexcoord += float2(0.5, 0.5 * Data.UVScale.w);
	}
	else if (Data.Type == 2) // Scrolling
	{
		AnimatedTexcoord = float2(dot(OffsetAndScaledTexcoord, Data.Rotation.xy), dot(OffsetAndScaledTexcoord, Data.Rotation.zw));
		
		AnimatedTexcoord /= Data.UVScale.xy;
		AnimatedTexcoord *= Data.UVScale.zw;
		
		AnimatedTexcoord += float2(0.5, 0.5);
	}
	
	return AnimatedTexcoord;
}

float4 Blend(float4 Dest, float4 Source, AnimationData Data)
{
	float4 Result = float4(1.0, 0.0, 1.0, 1.0);
	
	if (Data.BlendMode == 0) // Add
	{
		Result.rgb = lerp(Dest.rgb, Dest.rgb + Source.rgb, Source.a);
		Result.a = max(Dest.a, Source.a);
	}

	if (Data.BlendMode == 1) // Multiply
	{
		Result = Dest * Source;
	}

	if (Data.BlendMode == 2) // Overlay
	{
		// no idea what this is doing
		Result.rgb = lerp(Dest.rgb * Source.rgb * 2.0, 1.0 - (2.0 * (1.0 - Dest.rgb) * (1.0 - Source.rgb)), step(0.5, Dest.rgb));
		Result.a = Source.a;
	}

	if (Data.BlendMode == 3) // Normal (classic alpha blending with support for transparent destination)
	{
		Result.rgb = lerp(Dest.rgb * Dest.a, Source.rgb, Source.a);
		Result.a = max(Source.a, Dest.a);
	}

	return Result;
}

float4 GetAnimatedTexcoord(float2 Texcoord)
{
	float4 AnimatedTexcoord = vec4(0.0);
	
	AnimationData data = GetAnimationData(0);
	AnimatedTexcoord.xy = GetAnimatedTexcoord(Texcoord, data);
	
#ifdef NUM_ANIMATIONS_2
	data = GetAnimationData(1);
	AnimatedTexcoord.zw = GetAnimatedTexcoord(Texcoord, data);
#endif	
	
	return AnimatedTexcoord;
}

float4 Animate(float4 BaseColor, in sampler2D MaskTextureSampler, float2 MaskTexcoord, in sampler2D AnimatedTextureSampler, float2 AnimatedTexcoord, AnimationData Data)
{
    float4 Mask = tex2D( MaskTextureSampler, MaskTexcoord );
	float4 Anim = vec4(0.0);
			
	if (Data.Type == 3) // Pulse
	{
		Anim = vec4(Data.AnimationOffset);
	}
	else
	{
		Anim = tex2D( AnimatedTextureSampler, AnimatedTexcoord );
		
		if ((Data.ClampAnimation > 0.0f) && (AnimatedTexcoord.y < 0.0 || AnimatedTexcoord.y > 1.0))
			Mask.a = 0.0;
	}

	float4 Masked = Anim * Mask;
	Masked.a *= Data.BlendFactor;
	float4 Blended = Blend(BaseColor, Masked, Data);
	return Blended;
}

float4 Animate(float4 BaseColor, float2 MaskTexcoord, float4 AnimatedTexcoord, in sampler2D MaskTextureSampler, in sampler2D AnimatedTextureSampler,
				 in sampler2D MaskTexture2Sampler, in sampler2D AnimatedTexture2Sampler)
{
	AnimationData data = GetAnimationData(0);
	
	float4 color = BaseColor;
	color = Animate(color, MaskTextureSampler, MaskTexcoord, AnimatedTextureSampler, AnimatedTexcoord.xy, data);
	
#ifdef NUM_ANIMATIONS_2
	data = GetAnimationData(1);
	color = Animate(color, MaskTexture2Sampler, MaskTexcoord, AnimatedTexture2Sampler, AnimatedTexcoord.zw, data);
#endif	
	
	return color;
}

		static float valueForNoise = 0.5f;
		float rand () {
			return frac(sin(Time)*1e4);
		}
		float modd(float x, float y) {
			return x - (y * floor(x/y));
		}
		float ramp(float y, float start, float end)
		{
			float inside = step(start,y) - step(end,y);
			float fact = (y-start)/(end-start)*inside;
			return ((1.0f-fact) * inside);
			//return 1.0f;
		}
		float myramp(float y, float start, float end)
		{
			float inside = step(start,y) - step(end,y);
			float fact = (y-start)/(end-start)*inside;
			return ((1.0f-fact) * inside);
			//return 1.0f;
		}
		float onOff(float a, float b, float c)
		{
			return step(c, sin(Time + a*cos(Time*b)));
		}

		float2 screenDistort(float2 uv)
		{
			uv -= float2(0.5f,0.5f);
			uv = uv*1.2f*(1.0f/1.2f+2.0f*uv.x*uv.x*uv.y*uv.y);
			uv += float2(0.5f,0.5f);
			return uv;
		}
		float rand_1_05(float2 uv)
		{
			float2 noises = (frac(sin(dot(uv ,float2(12.9898,78.233)*2.0)) * 43758.5453));
			return abs(noises.x + noises.y) * 0.5;
		}
		float stripes(float2 uv)
		{
			
			float noi = rand_1_05(uv*float2(0.5f,1.0f) + float2(1.0f,3.0f));
			return ramp(modd(uv.y*4.0f + Time/2.0f+sin(Time + sin(Time*0.63f)),1.0f),0.5f,0.6f)*noi;
			//return 1.0f;
		}
		
		float hash( float n )
		{
			return frac(sin(n)*43758.5453);
		}
		float gen_noise( float3 x )
		{
			// The noise function returns a value in the range -1.0f -> 1.0f

			float3 p = floor(x);
			float3 f = frac(x);

			f       = f*f*(3.0-2.0*f);
			float n = p.x + p.y*57.0 + 113.0*p.z;

			return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
						   lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
					   lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
						   lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
		}
		float4 main( VS_OUTPUT v ) : PDX_COLOR
		{
			float2 uv = v.vTexCoord;
			float2 dynamicUV = float2(uv.x+sin(Time), uv.y+sin(Time));
			uv = screenDistort(uv);
			float2 screenUV = uv;
			float2 look = uv;
			float window = 1.0f/(1.0f+20.0f*(look.y-mod(Time/4.0f,1.0f))*(look.y-mod(Time/4.0f,1.0f)));
			look.x = look.x + sin(look.y*10.0f + Time)/50.0f*onOff(4.0f,4.0f,0.3f)*(1.0f+cos(Time*80.0f))*window*0.02f; 
			float vShift = 0.4f*onOff(2.0f,3.0f,0.9f)*(sin(Time)*sin(Time*20.0f) + 
												 (0.5f + 0.1f*sin(Time*200.0f)*cos(Time)));
			look.y = mod(look.y + vShift*0.002f, 1.0f); 
			uv = look;
			
			
			
			float2 uvR = uv;
			float2 uvB = uv;

			uvR.x = uv.x * 1.0f - rand() * 0.02f * 0.1f;
			uvB.y = uv.y * 1.0f + rand() * 0.02f * 0.06f; 
			
			 
			if(uv.y < rand() && uv.y > rand() -0.1f && sin(Time) < 0.0f)
			{
				uv.x = (uv + 0.008f * rand()).x;
			}
			
			
			float4 c = float4(1.0f, 1.0f, 1.0f, 1.0f);
			c.x = tex2D( MapTexture, uvR ).x;
			c.y = tex2D( MapTexture, uv ).y;
			c.z = tex2D( MapTexture, uvB ).z;
			c.w = tex2D( MapTexture, uvB ).w;
			
			float scanline = sin( uv.y * 800.0f * rand())/30.0f; 
			c *= 1.0f - scanline; 
			
		    float4 OutColor = tex2D( MapTexture, v.vTexCoord );
			OutColor = c;
			 
			float2 vig_uv = uv * (1.0f - uv.xy);    //vec2(1.0)- uv.yx; -> 1.-u.yx; Thanks FabriceNeyret !
    
			float vig = vig_uv.x*vig_uv.y * 50.0f; // multiply with sth for intensity
			if (vig>1.0f) {vig = 1.0f;}
			vig_uv = v.vTexCoord * (1.0f - v.vTexCoord.xy);
			vig = pow(vig, 0.45f);		 	//vec2(1.0)- uv.yx; -> 1.-u.yx; Thanks FabriceNeyret !
			OutColor.rgb = OutColor.rgb * float3(vig,vig,vig);
			vig = vig_uv.x*vig_uv.y * 85.0f; // multiply with sth for intensity
			if (vig>1.0f) {vig = 1.0f;}
			vig = pow(vig, 0.8f); 
			OutColor.rgb = OutColor.rgb * float3(vig,vig,vig);
			  
			float vigAmt = 3.1f+0.05f+0.01f*sin(Time + 0.05f*cos(Time*5.0f));
			float vignette = (1.0f-vigAmt*(uv.y-0.5f)*(uv.y-0.5f))*1.0f*(1.0f-vigAmt*(uv.x-0.5f)*(uv.x-0.5f)); 
			vigAmt = 3.1f+0.05f+0.01f*sin(Time + 0.05f*cos(Time*5.0f));
			vignette = (1.0f-vigAmt*(v.vTexCoord.y-0.5f)*(v.vTexCoord.y-0.5f))*1.0f*(1.0f-vigAmt*(v.vTexCoord.x-0.5f)*(v.vTexCoord.x-0.5f)); 
			OutColor.rgb = OutColor.rgb * (12.0f+modd(uv.y*30.0f+Time,1.0f))/13.0f; 
			
			OutColor *= Color;
			return OutColor;
		}
	